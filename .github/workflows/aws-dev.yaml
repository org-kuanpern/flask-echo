name: Build, Push to Amazon ECR, Update Helm values

on:
  workflow_dispatch:
  push:
    branches: [ "dev" ]

env:
  AWS_REGION:     ap-southeast-1
  ECR_REPOSITORY: lambda-listen-s3-creation-dev
  ROLE_TO_ASSUME: arn:aws:iam::858070140421:role/github-action-ecr-power-wtf
  ROLE_SESSION_NAME: pushTestLambdaSession
  MANIFEST_BRANCH: dev
  HELM_REPOSITORY: xxx
  HELM_PATH: xxx


permissions:
  id-token: write
  contents: read

jobs:
  test-push-other:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout this
      uses: actions/checkout@v3

    - name: fetch-github-app-install-token
      id: fetch-token
      uses: getsentry/action-github-app-token@v1
      with:
        app_id: ${{ secrets.MANIFEST_APP_ID }}
        private_key: ${{ secrets.MANIFEST_APP_PRIVATE_KEY }}

    - name: Checkout that
      uses: actions/checkout@v3
      with:
        repository: org-kuanpern/eks03-app-manifest
        token: ${{ steps.fetch-token.outputs.token }}
        ref: ${{ env.MANIFEST_BRANCH }}
        path: ./eks03-app-manifest

    - name: Update Helm chart values in manifest git repo
      id: update-helm-values
      env:
        RUN_ID: $ {{ github.run_id }}
        TIMESTAMP: ${{ steps.get-timestamp.outputs.timestamp }}
        IMAGE_NAME: ${{ steps.build-image.outputs.image }}
        TOKEN: ${{ steps.fetch-token.outputs.token }}
      run: |
        cd eks03-app-manifest
        echo "now you see me! (${TIMESTAMP})" > see-me.txt
        git add see-me.txt
        git config --global user.email "${{github.event.pusher.email}}"
        git config --global user.name "${{github.event.pusher.name}}"
        git commit -m "update-artifact"
        git push https://${TOKEN}@github.com/org-kuanpern/eks03-app-manifest.git


#  deploy:
#    name: Deploy
#    runs-on: ubuntu-latest
#    environment: production
#
#    steps:
#    - name: Get current date
#      id: get-timestamp
#      run: echo "::set-output name=timestamp::$(date +'%Y-%m-%dT%H:%M:%S')"
#
#    - name: Checkout
#      uses: actions/checkout@v3
#
#    - name: Configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        role-to-assume: ${{ env.ROLE_TO_ASSUME }}
#        role-session-name: ${{ env.ROLE_SESSION_NAME }}
#        aws-region: ${{ env.AWS_REGION }}
#
#    - name: Login to Amazon ECR
#      id: login-ecr
#      uses: aws-actions/amazon-ecr-login@v1
#
#    - name: Build, tag, and push image to Amazon ECR
#      id: build-image
#      env:
#        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        IMAGE_TAG: ${{ github.sha }}
#      run: |
#        # Build a docker container and push it to ECR
#        aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} || aws ecr create-repository --repository-name ${ECR_REPOSITORY}
#        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
#        IMAGE_SHA=`docker inspect --format='{{index .RepoDigests 0}}' $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG | awk 'BEGIN{FS="@"}{print $2}'`
#        echo "::set-output name=image_sha::$IMAGE_SHA"
#    - name: Update Helm chart values in manifest git repo
#      id: update-helm-values
#      env:
#        RUN_ID: $ {{ github.run_id }}
#        TIMESTAMP: ${{ steps.get-timestamp.outputs.timestamp }}
#        IMAGE_NAME: ${{ steps.build-image.outputs.image }}
#      run: |
#        curl -v \
#          -X POST \
#          -H "apikey: ${{ env.WEBHOOK_API_KEY }}" \
#          -H "Content-Type: application/json" \
#          -d '{"login":"my_login","password":"my_password"}' \
#          http://api_org-test.apigee.net/v1/helloapikey




# update the code using input values
# make pull request (prod), or directly push (dev)
# git clone repo
# authenticate user
# verify permission to update the branch
# update branch with values etc etc (needs flask)
# pass over metadata
# API key\

# github app can listen to this id, but wouldn't know the values
# can send directly to the cluster, but need to identify myself securely
# can use api key
# api key must match
# build id must match